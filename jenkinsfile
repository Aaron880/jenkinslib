#!groovy
@Library('jenkinslib')_
def tools= new org.devops.tools()

pipeline{
    agent{node{
        label "master" //指定运行节点的标签或者名称
        //customWorkspace "${workspace}" //指定运行工作目录(可选)
    }}
    options{
        timestamps() //日志会有时间,需要安装插件
        skipDefaultCheckout() //删除隐式checkout scm语句
        disableConcurrentBuilds() //禁止并行
        timeout(time:1 ,unit:"HOURS") //流水线超时设置1h
    }

    parameters{string(name: "test",defaultValue:"abcd",description:'')}
    stages{
        //下载代码
        stage("GetCode"){ //阶段名称
            when{
            environment name: 'test',value: "abcd"
            }
            steps{
                timeout(time:5, unit:"MINUTES"){//步骤超时时间
                    script{
                        //填写运行代码
                        println("获取代码")
                        //测试工具tool
                        mvnHome= tool "maven3.6"
                        println(mvnHome)
                        sh "${mvnHome}/bin/mvn --version"
                    }

                }
            }
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "========A executed successfully========"
                }
                failure{
                    echo "========A execution failed========"
                }
            }
        }
        //构建
        stage("Build"){
            steps{
                timeout(time:20, unit:"MINUTES"){
                    script{
                        println("应用打包")
                    }
                }
            }


        }
        //代码扫描
        stage("CodeScan"){

            steps{
                timeout(time:30, unit:"MINUTES"){
                    script{
                        println("代码扫描")
                        tools.PrintMes("this is a jenkinslib")
                    }
                }
            }
          
        }
    }
    //构建后操作
    post{
        always{
            echo "========always========"
        }
        success{
            echo "========pipeline executed successfully ========"
            script{
                currentBuild.description ="\n 构建成功"
            }
        }
        failure{
            echo "========pipeline execution failed========"
             script{
                currentBuild.description ="\n 构建失败"
            }
        }
        aborted{
            echo "aborted"
              script{
                currentBuild.description ="\n 构建取消"
            }
        }
    }

}
